# -*- coding: utf-8 -*-
"""
Created on Wed Dec  6 09:38:57 2017

@author: Ethel Karskens
"""



#setup
from TwitterSearch import *
from oauth2client.service_account import ServiceAccountCredentials
from textblob import TextBlob
import re
import pandas as pd 
import numpy as np 
import gspread 
from oauth2client.service_account import ServiceAccountCredentials

from aylienapiclient import textapi

client_aylien = textapi.Client("9d0a1279", "7f35145310ca30bebfab17793c5a57d1")



ts = TwitterSearch(
                consumer_key = '**********',
                consumer_secret = '**************',
                access_token = '****************',
                access_token_secret = '***************',
                tweet_mode = 'extended'
                )


#Google Sheet API 

client_secret = r'C:\Users\Ethel Karskens\Downloads\MyProject_perso.json'

# use creds to create a client to interact with the Google Drive API
scope = ['https://spreadsheets.google.com/feeds']
creds = ServiceAccountCredentials.from_json_keyfile_name(client_secret , scope)
client = gspread.authorize(creds)



#creating a dataframe     
def TwitterNabDf(t):
    
    sh = client.open("NewsScrapy")
    sheet_3 = sh.get_worksheet(2)   
    sheet_3.resize(1) 
    

    def clean_tweet(tweet):
         '''
         Utility function to clean the text in a tweet by removing 
         links and special characters using regex.
         '''
         return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ", tweet).split())
     
# =============================================================================
    def aylien_sentimentPolarity(text): 
        sentiment = client_aylien.Sentiment({'text': text})
        return(sentiment['polarity'])
             
    def aylien_sentimentConfidence(text): 
        sentiment = client_aylien.Sentiment({'text': text})
        return(sentiment['polarity_confidence'])
 



    def analize_sentiment(tweet):
             '''
             Utility function to classify the polarity of a tweet
             using textblob.
             '''
             analysis = TextBlob(clean_tweet(tweet))
             if analysis.sentiment.polarity > 0:
                 return 1
             elif analysis.sentiment.polarity == 0:
                 return 0
             else:
                 return -1
    try:
        tso = TwitterSearchOrder() # create a TwitterSearchOrder object
        tso.set_result_type('recent')
        tso.set_language('en')      
        tso.set_keywords(['CBA', 'bank'])   
        tso.set_include_entities(True) 
        
        
        for tweet in ts.search_tweets_iterable(tso):  
            
            
            if int(tweet['retweet_count']) > t: 
                  
               report_sheet = [tweet['user']['screen_name'],
                                    tweet['user']['name'],
                                    tweet['user']['id'],
                                    tweet['user']['followers_count'],
                                    tweet['user']['location'],
                               
                               tweet['text'],
                               tweet['entities']['hashtags'],
                               tweet['retweet_count'],                          
                               tweet['geo'],
                               tweet['user']['time_zone'],
                               tweet['created_at'], 
                               analize_sentiment(tweet['text']), 
                               aylien_sentimentPolarity(clean_tweet(tweet['text'])), 
                               aylien_sentimentConfidence(clean_tweet(tweet['text']))]
               
               sheet_3.append_row(report_sheet)
               
               display(tweet['id']) 
               
                
 
             
    except TwitterSearchException as e: # take care of all those ugly errors if there are some
        print(e)
        
        
